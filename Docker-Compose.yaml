services:
  # PostgreSQL Database
  db:
    image: postgres:17
    build:
      context: ./SinemonBackend
      dockerfile: postgres.dockerfile
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # RabbitMQ for messaging
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"  # Management UI
      - "5672:5672"    # Messaging port
    networks:
      - app-network

  # Django Backend (on port 8080 as required)
  backend:
    build:
      context: ./SinemonBackend
      dockerfile: Dockerfile-backend.dockerfile
    working_dir: /backend_dir/mdSense
    command: python manage.py runserver 0.0.0.0:8080
    volumes:
      - ./SinemonBackend:/backend_dir
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app-network

  # RabbitMQ Consumer (masterconsumer1.py)
  consumer:
    build:
      context: ./SinemonBackend
      dockerfile: Dockerfile-backend.dockerfile
    working_dir: /backend_dir/mdSense
    command: python /consumers/masterconsumer1.py
    volumes:
      - ./SinemonBackend:/backend_dir
      - ./SinemonBackend/mdSense/base/consumers:/consumers
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_started
    networks:
      - app-network

  # Socket.IO Server (sock.py)
  socket:
    build:
      context: ./SinemonBackend
      dockerfile: Dockerfile-backend.dockerfile
    working_dir: /backend_dir/mdSense
    command: python /consumers/sock.py
    volumes:
      - ./SinemonBackend:/backend_dir
      - ./SinemonBackend/mdSense/base/consumers:/consumers
    ports:
      - "9000:9000"
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  # Generate Django SECRET_KEY (run manually)
  generate-secret-key:
    image: python:3.9-slim
    entrypoint: python -c "from django.core.management.utils import get_random_secret_key as g; print(g())"
    networks:
      - app-network

  # One-off restore service for .DUMP file
  restore:
    image: postgres:17
    build:
      context: ./SinemonBackend
      dockerfile: postgres.dockerfile
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./SinemonBackend/database/backup/latest_backup_with_user.DUMP:/latest_backup_with_user.DUMP
    environment:
      PGPASSWORD: postgres
    entrypoint: >
      sh -c "sleep 15 && pg_restore -U postgres -d postgres -h db /latest_backup_with_user.DUMP"
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge
