"""
Django settings for mdSense project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
print(BASE_DIR)
# BASE_DIR = Path(__file__).resolve().parent.parent

# DataFlair #Logging Information
# LOGGING = {
#     'version': 1,
#     # Version of logging
#     'disable_existing_loggers': False,
#     #disable logging
#     # Handlers #############################################################
#     'handlers': {
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.FileHandler',
#             'filename': BASE_DIR+'/general.log',
#         },
# ########################################################################
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     # Loggers ####################################################################
#     'loggers': {
#         'django': {
#             'handlers': ['file', 'console'],
#             'propagate': True,
#             'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO')
#         },
#     },
# }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "file": {
            "level": "INFO",
            "class": "logging.FileHandler",
            "filename": str(BASE_DIR) + "/logs/general.log",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file"],
            "level": "INFO",
            "propagate": False,
        },
    },
}
# import logging.config
# logging.config.dictConfig(LOGGING)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
try:

    SECRET_KEY = os.environ["SECRET_KEY"]
    # print(SECRET_KEY)
except KeyError as e:
    raise RuntimeError("Could not find a Secret key in env.")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# import socket

# hostname = socket.gethostname() + ".local"
# ipaddress = socket.gethostbyname(hostname)
# print(ipaddress)
# ALLOWED_HOSTS = [ipaddress]
ALLOWED_HOSTS = [
    "backend",         # internal Docker hostname
    "0.0.0.0",         # Docker and local browser access
    "localhost",       # host machine browser
    "127.0.0.1",       # alternate local IP
]

APP_LABEL = "base"



# CSRF_COOKIE_NAME = "csrftoken"
# CSRF_COOKIE_NAME = "XSRF-TOKEN"

# CSRF_COOKIE_NAME = "csrftoken"
# CSRF_HEADER_NAME = 'X-CSRFTOKEN'

# from corsheaders.defaults import default_headers

# CORS_ALLOW_HEADERS = list(default_headers) + [
#     'X-CSRFTOKEN',
# ]


# CSRF_COOKIE_NAME = "csrftoken"
# CSRF_COOKIE_HTTPONLY = False

# CORS_EXPOSE_HEADERS = ["Content-Type", "X-CSRFToken"]
# CORS_ALLOW_CREDENTIALS = True

# os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mdSense.settings')
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "sslserver",
    "base",
    "phonenumber_field",
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "django_filters",
    "corsheaders",
    "drf_multiple_model",
    "admin_reorder",
    "ckeditor",
    # 'timedelta'
    # "kombu",
    # "notifications",
    # 'core',
]

CKEDITOR_CONFIGS = {
    "default": {
        "skin": "moono",
        # 'skin': 'office2013',
        "toolbar_Basic": [["Source", "-", "Bold", "Italic"]],
        "toolbar_YourCustomToolbarConfig": [
            {
                "name": "document",
                "items": [
                    "Source",
                    "-",
                    "Save",
                    "NewPage",
                    "Preview",
                    "Print",
                    "-",
                    "Templates",
                ],
            },
            {
                "name": "clipboard",
                "items": [
                    "Cut",
                    "Copy",
                    "Paste",
                    "PasteText",
                    "PasteFromWord",
                    "-",
                    "Undo",
                    "Redo",
                ],
            },
            {"name": "editing", "items": ["Find", "Replace", "-", "SelectAll"]},
            {
                "name": "forms",
                "items": [
                    "Form",
                    "Checkbox",
                    "Radio",
                    "TextField",
                    "Textarea",
                    "Select",
                    "Button",
                    "ImageButton",
                    "HiddenField",
                ],
            },
            "/",
            {
                "name": "basicstyles",
                "items": [
                    "Bold",
                    "Italic",
                    "Underline",
                    "Strike",
                    "Subscript",
                    "Superscript",
                    "-",
                    "RemoveFormat",
                ],
            },
            {
                "name": "paragraph",
                "items": [
                    "NumberedList",
                    "BulletedList",
                    "-",
                    "Outdent",
                    "Indent",
                    "-",
                    "Blockquote",
                    "CreateDiv",
                    "-",
                    "JustifyLeft",
                    "JustifyCenter",
                    "JustifyRight",
                    "JustifyBlock",
                    "-",
                    "BidiLtr",
                    "BidiRtl",
                    "Language",
                ],
            },
            {"name": "links", "items": ["Link", "Unlink", "Anchor"]},
            {
                "name": "insert",
                "items": [
                    "Image",
                    "Flash",
                    "Table",
                    "HorizontalRule",
                    "Smiley",
                    "SpecialChar",
                    "PageBreak",
                    "Iframe",
                ],
            },
            "/",
            {"name": "styles", "items": ["Styles", "Format", "Font", "FontSize"]},
            {"name": "colors", "items": ["TextColor", "BGColor"]},
            {"name": "tools", "items": ["Maximize", "ShowBlocks"]},
            {"name": "about", "items": ["About"]},
            "/",  # put this to force next toolbar on new line
            {
                "name": "yourcustomtools",
                "items": [
                    # put the name of your editor.ui.addButton here
                    "Preview",
                    "Maximize",
                ],
            },
        ],
        "toolbar": "YourCustomToolbarConfig",  # put selected toolbar config here
        # 'toolbarGroups': [{ 'name': 'document', 'groups': [ 'mode', 'document', 'doctools' ] }],
        # 'height': 291,
        # 'width': '100%',
        # 'filebrowserWindowHeight': 725,
        # 'filebrowserWindowWidth': 940,
        # 'toolbarCanCollapse': True,
        # 'mathJaxLib': '//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js?config=TeX-AMS_HTML',
        "tabSpaces": 4,
        "extraPlugins": ",".join(
            [
                "uploadimage",  # the upload image feature
                # your extra plugins here
                "div",
                "autolink",
                "autoembed",
                "embedsemantic",
                "autogrow",
                # 'devtools',
                "widget",
                "lineutils",
                "clipboard",
                "dialog",
                "dialogui",
                "elementspath",
            ]
        ),
    }
}


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        "rest_framework.authentication.SessionAuthentication",
    ],
}


DEFAULT_AUTO_FIELD = "django.db.models.AutoField"

SECURE_CONTENT_TYPE_NOSNIFF = True
MIDDLEWARE = [
    "allauth.account.middleware.AccountMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "base.baseuser.middleware.BaseUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "admin_reorder.middleware.ModelAdminReorder",
]


ADMIN_REORDER = (
    "auth",
    {
        "app": "base",
        "label": "User",
        "models": (
            "base.User_Custom",
            "base.User_Custom_Groups",
            "base.User_Custom_User_Permissions",
            "base.Connection",
            "base.BaseUser",
        ),
    },
    {
        "app": "base",
        "label": "Member",
        "models": (
            "base.Visits",
            "base.Vaccinations",
            "base.Prescription",
            "base.mdNotes",
            "base.labs",
            "base.BodyComp",
            "base.License",
            "base.MedInsurance",
            "base.Member",
            "base.RxDiscount",
            "base.RxInsurance",
        ),
    },
    {
        "app": "base",
        "label": "Member <-> Provider",
        "models": (
            "base.Notification",
            "base.Medinfo_release",
            "base.QueueConfig",
            "base.Queue",
            "base.Enrollment",
            "base.Comment",
            "base.Patientvisit",
            "base.ProviderRatings",
            "base.ProviderRating",
            "base.ProviderRatingHistory",
            "base.ProviderQuestionsReportCard",
            "base.ProviderReportCards",
            "base.Reportcard",
            "base.Provider_reportcard",
            "base.Appointment",
            "base.Recommendation",
            "base.Recommendations",
        ),
    },
    {
        "app": "base",
        "label": "Provider",
        "models": (
            "base.Provider",
            "base.RenderingProvider",
            "base.ScoreTrack",
            "base.Scores",
            "base.Points",
            "base.Badge",
            "base.Badges",
            "base.AppointmentType",
            "base.Office",
            "base.OfficeConfig",
            "base.Measure",
            "base.MeasuresTrack",
            "base.Vote",
        ),
    },
    {
        "app": "base",
        "label": "Provider License",
        "models": (
            "base.Probations",
            "base.Arbitrations",
            "base.Provider_Desc",
            "base.Licensetrack",
            "base.Citations",
            "base.ValidIn",
            "base.Otherstate",
            "base.Malpractices",
            "base.Convictions",
            "base.Actions",
            "base.Accusations",
            "base.Number_Of_Negatives",
            "base.Number_Negatives_V",
            "base.Case",
        ),
    },
    {
        "app": "base",
        "label": "CODES",
        "models": (
            "base.POScodes",
            "base.Pcodes",
            "base.Dcodes",
            "base.Mcodes",
        ),
    },
    {
        "app": "base",
        "label": "Claim",
        "models": (
            "base.Claim_Info",
            "base.Claim_Detail",
            "base.Claim_Dx",
            "base.Claim_Mx",
        ),
    },
    "django",
    "authtoken",
    "socialaccount",
    "auth_group",
)


CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
# CORS_ALLOW_CREDENTIALS = False
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:19002",
# ]
ROOT_URLCONF = "mdSense.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "base.baseuser.context_processors.baseuser",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "mdSense.wsgi.application"

# CACHES = {
#     "default": {
#         "BACKEND": "django_redis.cache.RedisCache",
#         "LOCATION": "redis-13037.c292.ap-southeast-1-1.ec2.cloud.redislabs.com:13037",
#         "OPTIONS": {
#             "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             "PASSWORD":"CFRqJ4t0XRWu1rUvFBZjMeHxs1pFxChz",
#         }
#     }
# }
# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "sinemon_db",
        "USER": "postgres",
        # 'PASSWORD': 'sU7%4qea@EQJmDHrSKSPfa',
        "PASSWORD": "postgres",
        # "HOST": "localhost",
        "HOST": os.environ.get("DB_HOST", "db"), #For docker
        "PORT": "5432",
        "OPTIONS": {"options": "-c search_path=django,public,medbaseca"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/Chicago"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATIC_URL = "/static/"

STATICFILES_DIRS = (
    "/static/img/",
    "/static/",
)

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


SITE_ID = 1

ACCOUNT_LOGOUT_REDIRECT_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "member_view"  #'/'


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
]

AUTH_USER_MODEL = "base.user_custom"

ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_EMAIL_REQUIRED = True
# ACCOUNT_EMAIL_VERIFICATION = 'none'

# ACCOUNT_FORMS = {
#     'login': 'allauth.account.forms.LoginForm',
#     'signup': 'allauth.account.forms.SignupForm',
#     'add_email': 'allauth.account.forms.AddEmailForm',
#     'change_password': 'allauth.account.forms.ChangePasswordForm',
#     'set_password': 'allauth.account.forms.SetPasswordForm',
#     'reset_password': 'allauth.account.forms.ResetPasswordForm',
#     'reset_password_from_key': 'allauth.account.forms.ResetPasswordKeyForm',
#     'disconnect': 'allauth.socialaccount.forms.DisconnectForm',
# }


REST_AUTH_REGISTER_SERIALIZERS = {
    "REGISTER_SERIALIZER": "base.serializers.accountsserializer.MemberRegisterSerializer",
}

REST_AUTH_SERIALIZERS = {
    # 'LOGIN_SERIALIZER': 'path.to.custom.LoginSerializer',
    "TOKEN_SERIALIZER": "base.serializers.accountsserializer.MemberTokenSerializer",
}
